# -*- mode: python -*-
# vi: set ft=python :

"""
Loaded:
- print_function from the future
- sys
- traceback
- random
- yaml
- pprint as pp
- jinja2's Template
- create_password(length)
- print_exc_plus()
"""

from __future__ import print_function
import sys
import traceback
import random
import yaml
from pprint import pprint as pp
from jinja2 import Template

try:
    from local_init import *
except:
    pass

assert yaml
assert pp
assert Template

try:
    from django.core.management import setup_environ
    import settings
    setup_environ(settings)
    print('imported django settings')
    try:
        exec_strs = [
            "from %s.models import *" % apps for apps in
                settings.INSTALLED_APPS
        ]
        for x in exec_strs:
            try:
                exec(x)
            except ImportError:
                pass
            except:
                print('Not imported for %s' %x)
        print('imported django models')
    except:
        pass
except:
    pass

def create_password(length):
    print(''.join([chr(random.randint(32,126)) for i in range(length)]))

def print_exc_plus():
    """
    Print the usual traceback information, followed by a listing of all the
    local variables in each frame.
    """
    tb = sys.exc_info()[2]
    while 1:
        if not tb.tb_next:
            break
        tb = tb.tb_next
    stack = []
    f = tb.tb_frame
    while f:
        stack.append(f)
        f = f.f_back
    stack.reverse()
    traceback.print_exc()
    print("Locals by frame, innermost last")
    for frame in stack[8:]:
        print()
        print("Frame %s in %s at line %s" % (frame.f_code.co_name,
                                             frame.f_code.co_filename,
                                             frame.f_lineno))
        for key, value in list(frame.f_locals.items()):
            print("\t%20s = " % key, end=' ')
            #We have to be careful not to cause a new error in our error
            #printer! Calling str() on an unknown object could cause an
            #error we don't want.
            try:
                print(value)
            except:
                print("<ERROR WHILE PRINTING VALUE>")

print(__doc__)
